continue
expect(page).to have_content('testing just')
Message.create(content:'testing just', user_id:1).save
visit '/'
Message.last
Message.all
save_and_open_page
expect(page).to have_content('Pekka')
visit '/logs'
click_button('Send')
fill_in('message[content]', with: 'This message is a test message')
visit '/'
fill_in('message[content]', with: 'This message is a test message')
click_button('Send')
continue
all('input')[2].set('pekka')
all('input')
find('input', match: :first)
find('input')[1]
find('input')[1
find('input')
find('#message_content')
find('message_content')
find('message[content]')
find('message[content]'
all('input')[]
all('input')[3]
fill_in(all('input')[5], with: 'pekka')
fill_in(all('input')[4], with: 'pekka')
fill_in(all('input')[3], with: 'pekka')
fill_in(all('input')[0], with: 'pekka')
fill_in(all('input')[1], with: 'pekka')
fill_in(all('input')[2], with: 'pekka')
all('input')[2].fill_in(with: 'pekka')
all('input')[2].fill_with
all('input')[2].fill_in('pekka')
all('input')[2].fill_in
all('input')[2]
all('input')
find('input')[2]
find('input')
find('input', class: 'form-control')
find('form-control')
find('message[content]')
find('message_content')
find('message')
find('input')
page.all('input')
page.all()
page.all
find(#all)
continue
@society
continue
@society
continue
Favorite.find_by(user_id:current_user.id, stream_id:Stream.find_by(name:params[:channel]).id)
Stream.find_by(name:params[:channel])Favorite.find_by(user_id:current_user.id, stream_id:Stream.find_by(name:params[:channel]).id)
Stream.find_by(name:params[:channel])
Favorite.find_by(user_id:current_user.id, stream_id:Stream.find_by(name:params[:channel].id))
Favorite.find_by(user_id:current_user.id, stream_id:Stream.find_by(name:params[:channel].id)
Favorite.find_by(user_id:current_user.id, stream_id:params[:channel].id)
continue
!User.find_by_name("Veeti").nil?
!User.find_by_name("veeti").nil?
!User.find_by_name(@message.content.split[1]).nil?
@message.content[0..4].match('^/[w][ ]') 
@message.content[0..4].match('^/[w][ ]') && !User.find_by_name(@message.content.split[1]).nil?
continue
!User.find_by_name(@message.content.split[1]).nil?
!Society.find_by_abbreviation(@message.content.to_s[1..3]).nil?
@message.content.split[1]
@message.target_name
!User.find_by_name(@message.target_name).nil?
continue
@message.content[0..4].match('^/[a-z][a-z][a-z][ ]') && !Society.find_by_abbreviation(@message.content.to_s[1..3]).nil?
@message.content[0..4].match('^/[a-z][a-z][a-z][ ]') && !Society.find_by_abbreviation(@message.content.to_s[1..3]).id.nil?
@message.user_id
current_user.id
continue
User.find_by_name(@message.target_name).nil?
!User.find_by_name(@message.target_name).nil?
User.find_by_name(@message.target_name).wont_be_nil
User.find_by_name(@message.target_name)
User.find_by_name(@message.target_name) !== nil
User.find_by_name(@message.target_name) == nil
User.find_by_name(@message.target_name)
User.find_by_name(@message.target_name) != nil
User.find_by_name(@message.target_name)
continue
params
=para
continue
params[:user_id]
params
continue
params[:user_id]
params
continue
membership_params
continue
params
membership_params
continue
params[:name]
society_params
continue
current_user.name
current_user.name == message.user.name
continue
current_user.name == message.user.name
message.target_name
message.user.name
current_user.name
continue
@message.target_name.nil? && @message.society.nil?
!@message.target_name.nil?
!@message.society.nil?
continue
@message.first.society.name
@messages.first.society.name
@messages.first.society
@messages.first
@messages
continue
subscribe_to "/messages/"+'ama'
subscribe_to "/messages/"+ama
subscribe_to "/messages/"+society.abbreviation
@societies
continue
PrivatePub.publish_to("/messages/new", message: @message)
continue
PrivatePub.publish_to("/messages/public", message: @message)
PrivatePub.publish_to("/messages/"+@message.society.abbreviation, message: @message)
@message.society_id = Society.find_by_abbreviation(@message.content.to_s[1..3]).id
@message
@message.society_id = Society.find_by_abbreviation(@message.content.to_s[1..3])
@message.content.match('^/[a-z][a-z][a-z][ ]')
@message
continue
response
current_user.twitch
continue
account.refresh_token
account
continue
account.access_token
account.scopes
account.refresh_token
account
continue
account.refresh_token
account.access_token
account.acces_token
account
continue
account.refresh_token
account.access_token
account
continue
account.users
account
continue
end
  config.client_secret = 'olZ7SvehdHe-BttcVbfFg5Sp'
  config.client_id = '527203940713-6o128c0piis6gm1t3rnk3rrmmdvq8tgr.apps.googleusercontent.com'
Yt.configure do |config|
end
  config.api_key = 'AIzaSyDLRqPR3U0y-CCKA_sysstvnz_MDB6IklY'
Yt.configure do |config|
account.
account
continue
account = Yt::Account.new access_token: current_user.youtubetoken
account.subscribed_channels
account
account = Yt::Account.new access_token: current_user.youtubetoken
Yt.configure do |config|account = Yt::Account.new access_token: current_user.youtubetoken
end
  config.log_level = :debug
Yt.configure do |config|
account.subscribed_channels
continue
@channel.videos.first(10)
@channel.videos.methods
@channel.videos[2]
@channel.videos.get(3)
@channel.videos.first
@channel.videos[4]
@channel.videos.get
@channel.videos(3)
@channel.videos.methods
@channel.videos.count
@channel.videos
@channel
continue
@channel.videos.count
@channel.videos
@channel.methods
continue
account.subscribed_channels.first.title
account.subscribed_channels.first
account.subscribed_channels.first.username
account.subscribed_channels.first.methods
account.subscribed_channels.first.name
account.subscribed_channels.first.methods
account.subscribed_channels.methods
account.subscribed_channels
account.subscribed.channels
account.methods
account.current_subscriptions
account
continue
account.access_token
account.methods
continue
account
account.subscribed_channels.to_json
account.subscribed_channels.methods
account.subscribed_channels
account.methods
account
a.first.videos.to_json
a.first.videos.methods
a.first.videos.method
a.first.videos.last(10)
a.first.subscribed?
a.first.methods
a.first.videos.count
a.first.videos
a.first videos
a.first.methods
a.map do |s| s.methods end
a.first.methods
a.each do |s| s.methods end
a.methods
a.channels
a.first
a.each do |s| s.subscriber_count end
a.each do |s| s['title'] end
a.each do |s| s.title end
a.each do |s| s.keys end
a.each do |s| s end
a.each do |s| s.channel.description end
a.each do |s| s.description end
a.each do |s| s.name end
a.each do |s| end
a.initialize
a.help
a.channel
a.channel.first
a.includes('Northernlion')
a.includes
a.subscribers
a.initialize
a.channels
