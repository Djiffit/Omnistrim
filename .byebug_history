continue
@message
continue
Message.last
Message.all
@message
continue
@message
continue
Message.all
continue
Message.all
continue
Message.all
Message.last
@message
continue
Message.all
Message.last
User.last
Message.all
Message.last
continue
params
continue
findMessageType
@message.user_id = 1
current_user
boolean current_user
if current_user
@message.content.to_s.length > 0
@message
@message = Message.create(content: params[:message][:content])
params[:message][:content]
params[:message]
params
@message = Message.create(content: params[:message][:content]
continue
params
instance_variables
continue
params
continue
params
@_params
instance_variables
continue
@_params
instance_variables
post :create, @_params
instance_variables
@_params =params
params
instance_variables
params = {:message => @message}
params = :message => @message
instance_variables
User.find_by_id(1)
@message
params
instance_variables
continue
instance_variables
action_name
env
request
status
headers
@_params
instance_variables
eval
variables
message
params
continue
params
asdf
continue
params
continue
@message
params[:controller]
params[controller]
params
continue
post :create, params
params = {:message => @message}
post :create, params = {:message => @message}
post :create, params = [:message => @message}
params[:message][:content]
params = {:message => @message}
a[:message][:content]
a[:message]
a[:message}
a = {:message => @message}
@message[:content]
@message
@message.attribute_names
post :create, params => {:message => @message.attributes}
post :create, params => {:message => @message}
post :create, params = {:message => @message}
post :create, {:message => @message}
@message
continue
get :show, :id => FactoryGirl.create(:message).id
get :show, :id => Message.last.id
ger :show, :id => message.id.to_s
Message
Hotel
get :index
MessagesController(:create)
MessagesController.create
MessagesController
@message = create(:message)
continue
save_and_open_page
visit '/logs/fed'
save_and_open_page
find_content('message')
find('message')
find
visit '/logs'
Message.last
Message.create(content:'Peepee jjeeejee', user_id:1).save
Message.all
Message
continue
Message.create(content:'Peepee jjeeejee', user_id:1).save
Message.create(content:'Peepee jjeeejee', user_id:1)
User.first
continue
Message.all.select{ |a| a.society.nil? && (a.target_name != current_user.name) }
Message.all
continue
continue]
Message.last
Message.count
Message.all
continue
current_user
continue
session[:user]
session
ApplicationController.current_user
ApplicationController
current_user
continue
expect(page).to have_content('testing just')
Message.create(content:'testing just', user_id:1).save
visit '/'
Message.last
Message.all
save_and_open_page
expect(page).to have_content('Pekka')
visit '/logs'
click_button('Send')
fill_in('message[content]', with: 'This message is a test message')
visit '/'
fill_in('message[content]', with: 'This message is a test message')
click_button('Send')
continue
all('input')[2].set('pekka')
all('input')
find('input', match: :first)
find('input')[1]
find('input')[1
find('input')
find('#message_content')
find('message_content')
find('message[content]')
find('message[content]'
all('input')[]
all('input')[3]
fill_in(all('input')[5], with: 'pekka')
fill_in(all('input')[4], with: 'pekka')
fill_in(all('input')[3], with: 'pekka')
fill_in(all('input')[0], with: 'pekka')
fill_in(all('input')[1], with: 'pekka')
fill_in(all('input')[2], with: 'pekka')
all('input')[2].fill_in(with: 'pekka')
all('input')[2].fill_with
all('input')[2].fill_in('pekka')
all('input')[2].fill_in
all('input')[2]
all('input')
find('input')[2]
find('input')
find('input', class: 'form-control')
find('form-control')
find('message[content]')
find('message_content')
find('message')
find('input')
page.all('input')
page.all()
page.all
find(#all)
continue
@society
continue
@society
continue
Favorite.find_by(user_id:current_user.id, stream_id:Stream.find_by(name:params[:channel]).id)
Stream.find_by(name:params[:channel])Favorite.find_by(user_id:current_user.id, stream_id:Stream.find_by(name:params[:channel]).id)
Stream.find_by(name:params[:channel])
Favorite.find_by(user_id:current_user.id, stream_id:Stream.find_by(name:params[:channel].id))
Favorite.find_by(user_id:current_user.id, stream_id:Stream.find_by(name:params[:channel].id)
Favorite.find_by(user_id:current_user.id, stream_id:params[:channel].id)
continue
!User.find_by_name("Veeti").nil?
!User.find_by_name("veeti").nil?
!User.find_by_name(@message.content.split[1]).nil?
@message.content[0..4].match('^/[w][ ]') 
@message.content[0..4].match('^/[w][ ]') && !User.find_by_name(@message.content.split[1]).nil?
continue
!User.find_by_name(@message.content.split[1]).nil?
!Society.find_by_abbreviation(@message.content.to_s[1..3]).nil?
@message.content.split[1]
@message.target_name
!User.find_by_name(@message.target_name).nil?
continue
@message.content[0..4].match('^/[a-z][a-z][a-z][ ]') && !Society.find_by_abbreviation(@message.content.to_s[1..3]).nil?
@message.content[0..4].match('^/[a-z][a-z][a-z][ ]') && !Society.find_by_abbreviation(@message.content.to_s[1..3]).id.nil?
@message.user_id
current_user.id
continue
User.find_by_name(@message.target_name).nil?
!User.find_by_name(@message.target_name).nil?
User.find_by_name(@message.target_name).wont_be_nil
User.find_by_name(@message.target_name)
User.find_by_name(@message.target_name) !== nil
User.find_by_name(@message.target_name) == nil
User.find_by_name(@message.target_name)
User.find_by_name(@message.target_name) != nil
User.find_by_name(@message.target_name)
continue
params
=para
continue
params[:user_id]
params
continue
params[:user_id]
params
continue
membership_params
continue
params
membership_params
continue
params[:name]
society_params
continue
current_user.name
current_user.name == message.user.name
continue
